{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/globals.service.ts","webpack:///src/app/landing-page/landing-page.component.ts","webpack:///src/app/landing-page/landing-page.component.html","webpack:///src/app/profile/profile.component.html","webpack:///src/app/profile/profile.component.ts","webpack:///src/app/profile/profile.service.ts","webpack:///src/app/value.pipe.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","g","selectedLanguage","params","lang","languages","supportedLanguages","URLSearchParams","window","location","search","get","setLanguage","qp","Object","entries","map","key","val","join","href","pathname","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","GlobalsService","language","asObservable","newValue","includes","next","providedIn","LandingPageComponent","title","sub1","sub2","joinGithub","joinSlack","joinFB","open","openGithub","openSlack","openFB","ProfileComponent","s","notLoggedInText","loginText","loggedInText","logoutText","getLoginStatus","getProfile","getNotes","session","webId","console","log","idp","login","notesListRef","logOut","profile","userName","getString","name","type","publicNotes","privateNotes","addNote","note","ProfileService","http","store","$rdf","graph","a","trackSession","reject","currentSession","popupUri","alert","logout","webIdDoc","getSubject","typeIndexRef","getRef","publicTypeIndex","privateTypeIndex","typeIndex","notesListEntry","findSubject","forClass","TextDigitalDocument","initialiseNotesList","instance","storage","notesList","save","typeRegistration","addSubject","addRef","TypeRegistration","asRef","getNotesList","notes","getSubjectsOfType","text","newNote","addString","addDateTime","dateCreated","Date","now","success","fetcher","Fetcher","load","me","sym","any","doc","termType","value","token","authorization","access_token","q","endpoint","set","headers","toPromise","node","namespace","Value","ValuePipe","urlParams","Array","isArray","match","find","v","environment","production","bootstrapModule","catch","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ProfileComponent } from 'src/app/profile/profile.component';\r\nimport { LandingPageComponent } from 'src/app/landing-page/landing-page.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: LandingPageComponent },\r\n  { \r\n    path: 'profile', \r\n    component: ProfileComponent\r\n  },\r\n  // { path: 'welcome', component: LandingPageComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }","import { Component, OnInit } from '@angular/core';\nimport { GlobalsService } from './globals.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n\n  public languages;\n  public selectedLanguage = \"da\";\n  public params: any = {lang: null};\n\n  constructor(\n    private g: GlobalsService\n  ){}\n\n  ngOnInit(){\n\n    this.languages = this.g.supportedLanguages;\n\n    // Get language from URL query param\n    this.params = new URLSearchParams(window.location.search);\n    var lang = this.params.get('lang');\n    if(lang) this.selectedLanguage = lang;\n  \n  }\n\n  changeLanguage(lang){\n    this.selectedLanguage = lang;\n    this.params.lang = lang;\n    this.g.setLanguage(this.selectedLanguage);\n    \n    // Reload page\n    let qp = Object.entries(this.params).map(([key, val]) => `${key}=${val}`).join('&');        \n    window.location.href = window.location.pathname+\"?\"+qp;\n  }\n\n}\n","<div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"end\">\r\n    <span fxFlex=\"grow\" style=\"cursor:default\">\r\n        <span *ngFor=\"let item of languages; let i = index\">\r\n            <span\r\n                [style.font-weight]=\"selectedLanguage == item ? 500 : 100\"\r\n                class=\"clickable\"\r\n                (click)=\"changeLanguage(item)\">{{item}}\r\n            </span> \r\n            <span *ngIf=\"i < languages.length-1\"> | </span>\r\n        </span>\r\n    </span>\r\n</div>\r\n\r\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from 'src/app/app-routing.module';\n\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\n\n// App components\nimport { AppComponent } from './app.component';\nimport { LandingPageComponent } from './landing-page/landing-page.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ValuePipe } from './value.pipe';\nimport { ProfileComponent } from './profile/profile.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LandingPageComponent,\n    ValuePipe,\n    ProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FlexLayoutModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport{BehaviorSubject, Observable} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalsService {\n\n  public supportedLanguages = [\"da\", \"en\"];\n\n  constructor() {\n    this.language = new BehaviorSubject<string>(\"da\");\n  }\n\n  private language: BehaviorSubject<string>;\n\n  public getLanguage(): Observable<string> {\n    return this.language.asObservable();\n  }\n\n  public setLanguage(newValue: string): void {\n    if(!this.supportedLanguages.includes(newValue)) return;\n    this.language.next(newValue);\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Value } from 'src/app/value.pipe';\n\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.component.html',\n  styleUrls: ['./landing-page.component.css']\n})\nexport class LandingPageComponent implements OnInit {\n\n  title = [\n    new Value(\"Welcome to Linked Building Data Denmark\", \"en\"),\n    new Value(\"Velkommen til Linked Building Data Danmark\", \"da\"),\n  ]\n  sub1 = [\n    new Value(\"We are brewing something cool here! But first, the brew needs to do its thing, and that takes the time it takes!\", \"en\"),\n    new Value(\"Vi brygger på noget fedt! Men først skal bryggen gære, og det tager den tid sådan noget tager!\", \"da\"),\n  ]\n  sub2 = [\n    new Value(\"Until then, please have a look at one of the below channels\", \"en\"),\n    new Value(\"Indtil videre må du nøjes med en af nedenstående kanaler\", \"da\"),\n  ]\n\n  joinGithub = [\n    new Value(\"Join us on Github\", \"en\"),\n    new Value(\"Join os på Github\", \"da\"),\n  ]\n  joinSlack = [\n    new Value(\"Join our Slack channel\", \"en\"),\n    new Value(\"Join vores Slack channel\", \"da\")\n  ]\n  joinFB = [\n    new Value(\"Join our Facebook group\", \"en\"),\n    new Value(\"Join vores Facebook-gruppe\", \"da\"),\n  ]\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  openSlack(){\n    window.open(\"https://linkedbuildingdata-dk.slack.com\");\n  }\n\n  openFB(){\n    window.open(\"https://www.facebook.com/groups/841043836309086/852676755145794\");\n  }\n\n  openGithub(){\n    window.open(\"https://github.com/Linked-Building-Data-Denmark\");\n  }\n\n}\n","<div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"bg\" fxLayoutGap=\"5vh\">\n\n    <div fxFlex=\"10%\">\n        <p class=\"title\">{{title | value}}</p>\n        <p class=\"sub\">{{sub1 | value}}</p>\n        <p class=\"sub\">{{sub2 | value}}</p>\n    </div>\n\n    <div  fxFlex=\"50%\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxLayoutGap=\"10vw\">\n\n        <div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"clickable\">\n            <div class=\"logo\" (click)=\"openGithub()\">\n                <img class=\"rotate\" src=\"assets/github1.svg\" height=\"70vh\">\n                <img src=\"assets/github2.svg\" height=\"70vh\">\n            </div>\n            <p>{{joinGithub | value}}</p>\n        </div>\n\n        <div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"clickable\">\n            <div class=\"logo\" (click)=\"openSlack()\">\n                <img class=\"rotate\" src=\"assets/slack1.svg\" height=\"70vh\">\n                <img src=\"assets/slack2.svg\" height=\"70vh\">\n            </div>\n            <p>{{joinSlack | value}}</p>\n        </div>\n\n        <div fxLayout=\"column\" fxLayoutAlign=\"center center\" class=\"clickable\">\n            <div class=\"logo\" (click)=\"openFB()\">\n                <img class=\"rotate\" src=\"assets/facebook1.svg\" height=\"70vh\">\n                <img src=\"assets/facebook2.svg\" height=\"70vh\">\n            </div>\n            <p>{{joinFB | value}}</p>\n        </div>\n\n    </div>\n\n</div>","<div fxFlex=\"grow\" fxLayout=\"column\">\n    <p *ngIf=\"!session\">{{notLoggedInText | value}}</p>\n\n    <div fxFlex=\"grow\" fxLayout=\"column\" *ngIf=\"session && session.webId\" fxLayoutGap=\"5px\">\n\n        <p>{{loggedInText | value}} {{session.webId}}</p>\n\n        <p>{{userName}}</p>\n\n        <button mat-stroked-button [disabled]=\"profile\" (click)=\"getProfile()\">Get profile</button>\n\n        <h4>My public notes</h4>\n        <ul>\n            <li *ngFor=\"let item of publicNotes\">{{item}}</li>\n        </ul>\n\n        <h4>My private notes</h4>\n        <ul>\n            <li *ngFor=\"let item of privateNotes\">{{item}}</li>\n        </ul>\n\n        <mat-form-field appearance=\"fill\">\n            <mat-label>Note</mat-label>\n            <textarea matInput [(ngModel)]=\"note\"></textarea>\n        </mat-form-field>\n\n        <button mat-stroked-button [disabled]=\"!profile\" (click)=\"saveNote('public')\">Save public note</button>\n        <button mat-stroked-button [disabled]=\"!profile\" (click)=\"saveNote('private')\">Save private note</button>\n\n        <button (click)=\"logout()\" color=\"warn\" *ngIf=\"session\" fxFlex=\"20%\" mat-stroked-button>{{logoutText | value}}</button>\n\n    </div>\n\n    <div fxLayout=\"column\" *ngIf=\"!session\">\n        <p>{{loginText | value}}</p>\n        <div fxFlex=\"grow\" fxLayout=\"row\">\n            <button fxFlex=\"20%\" mat-stroked-button (click)=\"login('https://solid.community')\">Solid Community</button>\n            <button fxFlex=\"20%\" mat-stroked-button (click)=\"login('https://inrupt.net/')\">Inrupt</button>\n            <button fxFlex=\"20%\" mat-stroked-button>Custom</button>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { ProfileService } from './profile.service';\nimport { Value } from '../value.pipe';\nimport { foaf } from 'rdf-namespaces';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css'],\n  providers: [ProfileService]\n})\nexport class ProfileComponent implements OnInit {\n\n  public session;\n  public webId;\n  public profile;\n  public userName: string;\n  public note: string;\n  public publicNotes: string[];\n  public privateNotes: string[];\n\n  public notLoggedInText = [\n    new Value(\"Please log in to see your profile stuff\", \"en\"),\n    new Value(\"Log ind for at se din profil\", \"da\")\n  ];\n  public loginText = [\n    new Value(\"Please log in with one of the providers listed below\", \"en\"),\n    new Value(\"Log ind med en af nedenstående providers\", \"da\")\n  ]\n  public loggedInText = [\n    new Value(\"Logged in as\", \"en\"),\n    new Value(\"Logget ind som\", \"da\"),\n  ]\n  public logoutText = [\n    new Value(\"Log out\", \"en\"),\n    new Value(\"Log ud\", \"da\"),\n  ]\n\n  constructor(\n    private s: ProfileService\n  ) { }\n\n  async ngOnInit() {\n\n    await this.getLoginStatus();\n    await this.getProfile();\n    await this.getNotes();\n\n  }\n\n  async getLoginStatus(){\n    try{\n      this.session = await this.s.getLoginStatus();\n      this.webId = this.session.webId;\n    }catch(e){console.log(\"Couldn't get session\")} \n  }\n\n  async login(idp){\n    try{\n      this.session = await this.s.login(idp);\n      this.webId = this.session.webId;\n      const notesListRef = this.getProfile();\n      console.log(notesListRef);\n    }catch(e){console.log(e)} \n    \n  }\n\n  async logout(){\n    await this.s.logOut();\n    this.getLoginStatus();\n  }\n\n  async getProfile(){    \n    try{\n      // this.userName = await this.s.getNameTripledoc(this.webId);\n      this.profile = await this.s.getProfile(this.webId);\n      this.userName = this.profile.getString(foaf.name);\n    }catch(e){\n      console.log(e)\n      console.log(\"Couldn't get profile\")\n    }\n    return;\n  }\n\n  async getNotes(type?){\n    if(!type || type == 'public') this.publicNotes = await this.s.getNotes(this.profile, 'public');\n    if(!type || type == 'private') this.privateNotes = await this.s.getNotes(this.profile, 'private');\n  }\n\n  async saveNote(type){\n    await this.s.addNote(this.note, this.profile, type);\n    this.note = null;\n    await this.getNotes(type);\n  }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\ndeclare let $rdf: any; // Minified version added in assets/js/libs\r\n\r\nimport auth from 'solid-auth-client';\r\nimport { foaf, solid, schema, space, rdf } from 'rdf-namespaces';\r\nimport { fetchDocument, createDocument } from 'tripledoc';\r\n\r\n@Injectable()\r\nexport class ProfileService {\r\n\r\n    public session;\r\n    public store;\r\n\r\n    constructor(\r\n        private http: HttpClient\r\n    ){\r\n        this.store = $rdf.graph();\r\n    }\r\n\r\n    test(){\r\n        auth.trackSession(session => {\r\n            if (!session)\r\n              console.log('The user is not logged in')\r\n            else\r\n              console.log(`The user is ${session.webId}`)\r\n          })\r\n    }\r\n\r\n    getLoginStatus(){\r\n        return new Promise((resolve, reject) => {\r\n            auth.trackSession(session => {\r\n                if(!session){\r\n                    resolve(false);\r\n                }else{\r\n                    this.session = session;\r\n                    resolve(session);\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    // NB! Also possible to choose other options than community\r\n    async login(idp?){\r\n        if(!idp) idp = 'https://solid.community';\r\n        const session = await auth.currentSession();\r\n        if (!session){\r\n            await auth.login(idp);\r\n            return session;\r\n        }\r\n        else{\r\n            return session;\r\n        }\r\n    }\r\n\r\n    async popupLogin() {\r\n        let session = await auth.currentSession();\r\n        let popupUri = 'https://solid.community/common/popup.html';\r\n        // if (!session)\r\n        //   session = await auth.popupLogin({ popupUri });\r\n        alert(`Logged in as ${session.webId}`);\r\n    }\r\n\r\n    async logOut(){\r\n        return await auth.logout();\r\n    }\r\n\r\n    // Tripledoc seems to be pretty popular!\r\n    // Continue here: https://solidproject.org/for-developers/apps/first-app/3-reading-data\r\n    async getProfile(webId){\r\n        /* 1. Fetch the Document at `webId`: */\r\n        const webIdDoc = await fetchDocument(webId);\r\n        /* 2. Read the Subject representing the current user's profile: */\r\n        return webIdDoc.getSubject(webId);\r\n    }\r\n\r\n    async getNotesList(profile, type){\r\n        /* 1. Check if a Document tracking our notes already exists. */\r\n        const typeIndexRef = type == 'public' ? profile.getRef(solid.publicTypeIndex) : profile.getRef(solid.privateTypeIndex);\r\n        const typeIndex = await fetchDocument(typeIndexRef);\r\n        const notesListEntry = typeIndex.findSubject(solid.forClass, schema.TextDigitalDocument);\r\n\r\n        /* 2. If it doesn't exist, create it. */\r\n        if(notesListEntry === null) {\r\n            // We will define this function later:\r\n            return this.initialiseNotesList(profile, typeIndex, type);\r\n        }\r\n\r\n        /* 3. If it does exist, fetch that Document. */\r\n        const notesListRef = notesListEntry.getRef(solid.instance);\r\n        return await fetchDocument(notesListRef);\r\n    }\r\n\r\n    async initialiseNotesList(profile, typeIndex, type){\r\n        // Get the root URL of the user's Pod:\r\n        const storage = profile.getRef(space.storage);\r\n\r\n        // Decide at what URL within the user's Pod the new Document should be stored:\r\n        const notesListRef = storage + `${type}/notes.ttl`;\r\n        // Create the new Document:\r\n        const notesList = createDocument(notesListRef);\r\n        await notesList.save();\r\n\r\n        // Store a reference to that Document in the public Type Index for `schema:TextDigitalDocument`:\r\n        const typeRegistration = typeIndex.addSubject();\r\n        typeRegistration.addRef(rdf.type, solid.TypeRegistration)\r\n        typeRegistration.addRef(solid.instance, notesList.asRef())\r\n        typeRegistration.addRef(solid.forClass, schema.TextDigitalDocument)\r\n        await typeIndex.save([ typeRegistration ]);\r\n\r\n        // And finally, return our newly created (currently empty) notes Document:\r\n        return notesList;\r\n    }\r\n\r\n    async getNotes(profile, type){\r\n        // Get notes list\r\n        const notesList: any = await this.getNotesList(profile, type);\r\n\r\n        const notes = notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n        return notes.map(note => note.getString(schema.text));\r\n\r\n    }\r\n\r\n    async addNote(note, profile, type) {\r\n        // Get notes list\r\n        const notesList = await this.getNotesList(profile, type);\r\n\r\n        // Initialise the new Subject:\r\n        const newNote = notesList.addSubject();\r\n      \r\n        // Indicate that the Subject is a schema:TextDigitalDocument:\r\n        newNote.addRef(rdf.type, schema.TextDigitalDocument);\r\n      \r\n        // Set the Subject's `schema:text` to the actual note contents:\r\n        newNote.addString(schema.text, note);\r\n      \r\n        // Store the date the note was created (i.e. now):\r\n        newNote.addDateTime(schema.dateCreated, new Date(Date.now()));\r\n      \r\n        const success = await notesList.save([newNote]);\r\n        return success;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    async getNameRdflib(webId){\r\n        const store = $rdf.graph();\r\n        const fetcher = new $rdf.Fetcher(store, {});\r\n        await fetcher.load(webId);\r\n        const me = $rdf.sym(webId);\r\n        const name = store.any(me, $rdf.sym('http://xmlns.com/foaf/0.1/name'), null, me.doc());\r\n        // Note that this will also return invalid Literal data (integers, dates, etc.)\r\n        return (name && name.termType === 'Literal') ? name.value : null;\r\n    }\r\n\r\n    async queryDB(){\r\n        console.log(this.session);\r\n        const token = this.session.authorization.access_token;\r\n        const q = \"SELECT * WHERE { ?s ?p ?o . }\";\r\n        const endpoint = \"https://mads.inrupt.net/data\";\r\n\r\n        let params = new HttpParams().set('query', q);\r\n        let headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\r\n\r\n        // 'Authorization', `Bearer ${token}`\r\n\r\n        return this.http.get(endpoint, {params, headers}).toPromise();\r\n        \r\n    }\r\n\r\n    /**\r\n     * Gets any resource that matches the node, using the provided Namespace\r\n     * @param {string} node The name of the predicate to be applied using the provided Namespace \r\n     * @param {$rdf.namespace} namespace The RDF Namespace\r\n     * @param {string?} webId The webId URL (e.g. https://yourpod.solid.community/profile/card#me) \r\n     */\r\n    private getValueFromNamespace(node: string, namespace: any, webId?: string): string | any {\r\n        const store = this.store.any($rdf.sym(webId || this.session.webId), namespace(node));\r\n        if (store) {\r\n        return store.value;\r\n        }\r\n        return '';\r\n    }\r\n\r\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { GlobalsService } from './globals.service';\n\nexport class Value{\n  public '@value';\n  public '@lang';\n\n  constructor(value, lang){\n    this['@value'] = value;\n    this['@lang'] = lang;\n  }\n}\n\n/**\n * Takes an array of {'@value': 'some value', '@lang': 'da'} format values and returns the desired language\n */\n\n@Pipe({\n  name: 'value'\n})\nexport class ValuePipe implements PipeTransform {\n\n  constructor(\n    private g: GlobalsService\n  ){}\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n\n    // Get language from URL query param\n    const urlParams = new URLSearchParams(window.location.search);\n    var lang = urlParams.get('lang');\n\n    // Default to danish\n    if(!this.g.supportedLanguages.includes(lang)) lang = 'da';\n\n    if(Array.isArray(value)){\n      const match = value.find(v => v['@lang'] == lang);\n      if(match && match['@value']){\n        value = match['@value'];\n      }\n    }\n\n    return value;\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}